networks:
  kafka-net:
    driver: bridge

services:

  ##################
  # KAFKA SERVICES #
  ##################

  zookeeper1:
    image: confluentinc/cp-zookeeper:7.9.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    networks:
      - kafka-net

  zookeeper2:
    image: confluentinc/cp-zookeeper:7.9.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    networks:
      - kafka-net

  zookeeper3:
    image: confluentinc/cp-zookeeper:7.9.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    networks:
      - kafka-net

  kafka1:
    image: confluentinc/cp-kafka:7.9.1
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      # The broker id for this server.
      KAFKA_BROKER_ID: 1
      # Available Zookeepers for leader election.
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181,zookeeper2:2181,zookeeper3:2181"
      # Specifies the listener addresses that the Kafka brokers will advertise to clients and other brokers.
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      # JMX settings for monitoring
      KAFKA_OPTS: -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9406:/opt/jmx_exporter/kafka-jmx-exporter.yml
    volumes:
      # JMX Exporter files
      - "${PWD}/jmxexporter/jmx_prometheus_javaagent-1.3.0.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar"
      - "${PWD}/jmxexporter/config.yml:/opt/jmx_exporter/kafka-jmx-exporter.yml"
    networks:
      - kafka-net

  kafka2:
    image: confluentinc/cp-kafka:7.9.1
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      # The broker id for this server.
      KAFKA_BROKER_ID: 2
      # Available Zookeepers for leader election.
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181,zookeeper2:2181,zookeeper3:2181"
      # Specifies the listener addresses that the Kafka brokers will advertise to clients and other brokers.
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092
      # JMX settings for monitoring
      KAFKA_OPTS: -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9406:/opt/jmx_exporter/kafka-jmx-exporter.yml
    volumes:
      # JMX Exporter files
      - "${PWD}/jmxexporter/jmx_prometheus_javaagent-1.3.0.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar"
      - "${PWD}/jmxexporter/config.yml:/opt/jmx_exporter/kafka-jmx-exporter.yml"
    networks:
      - kafka-net

  kafka3:
    image: confluentinc/cp-kafka:7.9.1
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      # The broker id for this server.
      KAFKA_BROKER_ID: 3
      # Available Zookeepers for leader election.
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181,zookeeper2:2181,zookeeper3:2181"
      # Specifies the listener addresses that the Kafka brokers will advertise to clients and other brokers.
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092
      # JMX settings for monitoring
      KAFKA_OPTS: -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9406:/opt/jmx_exporter/kafka-jmx-exporter.yml
    volumes:
      # JMX Exporter files
      - "${PWD}/jmxexporter/jmx_prometheus_javaagent-1.3.0.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar"
      - "${PWD}/jmxexporter/config.yml:/opt/jmx_exporter/kafka-jmx-exporter.yml"
    networks:
      - kafka-net

  kafka-connect1:
    image: confluentinc/cp-kafka-connect:7.9.1
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    environment:

      # Used to discover all kafka brokers. One is enough, but we provide all for redundancy.
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect1
      CONNECT_GROUP_ID: "compose-connect-group"

      # Where the Kafka Connect configuration, offsets, and status are stored
      CONNECT_CONFIG_STORAGE_TOPIC: "docker-connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "docker-connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "docker-connect-status"

      # controls the format of the data that will be written to Kafka for source connectors or read from Kafka for sink connectors
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter" 
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"

      # comma-separated list of paths to directories that contain Kafka Connect plugins
      CONNECT_PLUGIN_PATH: "/usr/share/java"

      # JMX settings for monitoring
      CONNECT_JMX_PORT: 9999
      CONNECT_JMX_HOSTNAME: kafka-connect1
      KAFKA_OPTS: -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9407:/opt/jmx_exporter/kafka-connect-jmx-exporter.yml
    volumes:
      # kafka connect plugins
      - "${PWD}/kafka-connect-plugins/confluentinc-kafka-connect-http-source-1.0.0:/usr/share/java/confluentinc-kafka-connect-http-source"
      # JMX Exporter files
      - "${PWD}/jmxexporter/jmx_prometheus_javaagent-1.3.0.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar"
      - "${PWD}/jmxexporter/config.yml:/opt/jmx_exporter/kafka-connect-jmx-exporter.yml"
    networks:
      - kafka-net

  kafka-connect2:
    image: confluentinc/cp-kafka-connect:7.9.1
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    environment:

      # Used to discover all kafka brokers. One is enough, but we provide all for redundancy.
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect2
      CONNECT_GROUP_ID: "compose-connect-group"

      # Where the Kafka Connect configuration, offsets, and status are stored
      CONNECT_CONFIG_STORAGE_TOPIC: "docker-connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "docker-connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "docker-connect-status"

      # controls the format of the data that will be written to Kafka for source connectors or read from Kafka for sink connectors
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter" 
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"

      # comma-separated list of paths to directories that contain Kafka Connect plugins
      CONNECT_PLUGIN_PATH: "/usr/share/java"

      # JMX settings for monitoring
      CONNECT_JMX_PORT: 9999
      CONNECT_JMX_HOSTNAME: kafka-connect2
      KAFKA_OPTS: -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9407:/opt/jmx_exporter/kafka-connect-jmx-exporter.yml
    volumes:
      # kafka connect plugins
      - "${PWD}/kafka-connect-plugins/confluentinc-kafka-connect-http-source-1.0.0:/usr/share/java/confluentinc-kafka-connect-http-source"
      # JMX Exporter files
      - "${PWD}/jmxexporter/jmx_prometheus_javaagent-1.3.0.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar"
      - "${PWD}/jmxexporter/config.yml:/opt/jmx_exporter/kafka-connect-jmx-exporter.yml"
    networks:
      - kafka-net

  kafka-connect3:
    image: confluentinc/cp-kafka-connect:7.9.1
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    environment:

      # Used to discover all kafka brokers. One is enough, but we provide all for redundancy.
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect3
      CONNECT_GROUP_ID: "compose-connect-group"

      # Where the Kafka Connect configuration, offsets, and status are stored
      CONNECT_CONFIG_STORAGE_TOPIC: "docker-connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "docker-connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "docker-connect-status"

      # controls the format of the data that will be written to Kafka for source connectors or read from Kafka for sink connectors
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter" 
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"

      # comma-separated list of paths to directories that contain Kafka Connect plugins
      CONNECT_PLUGIN_PATH: "/usr/share/java"

      # JMX settings for monitoring
      CONNECT_JMX_PORT: 9999
      CONNECT_JMX_HOSTNAME: kafka-connect3
      KAFKA_OPTS: -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9407:/opt/jmx_exporter/kafka-connect-jmx-exporter.yml

    volumes:
      # kafka connect plugins
      - "${PWD}/kafka-connect-plugins/confluentinc-kafka-connect-http-source-1.0.0:/usr/share/java/confluentinc-kafka-connect-http-source"
      # JMX Exporter files
      - "${PWD}/jmxexporter/jmx_prometheus_javaagent-1.3.0.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar"
      - "${PWD}/jmxexporter/config.yml:/opt/jmx_exporter/kafka-connect-jmx-exporter.yml"
    networks:
      - kafka-net

  kafka-client:
    image: confluentinc/cp-kafka:7.9.1
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    entrypoint: ["sleep", "infinity"]  # Conteneur reste ouvert pour que tu puisses exec dedans
    networks:
      - kafka-net
  # Why this service?
  # The kafka service have JMX exporter
  # This means that everytime we want tu execture a kafka cli command
  # it returns an error. we can use this service to execute
  # kafka cli commands without the JMX exporter
  # the following command can be used to read api-data topic:
  # docker exec -it compose-kafka-client-1 kafka-console-consumer --bootstrap-server kafka:9092 --topic api-data --from-beginning



  ##################
  #   PROMETHEUS   #
  ##################

  prometheus:
    image: bitnami/prometheus:3.4.1
    ports:
      - "9090:9090"
    volumes:
      - "${PWD}/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml"
    networks:
      - kafka-net

  node-exporter:
      image: bitnami/node-exporter:1.9.1
      ports:
        - "9100:9100"
      depends_on:
        - prometheus
      command:
      - "--collector.textfile.directory=/var/lib/node_exporter/textfile_collector"
      volumes:
        - "${PWD}/custom-metrics:/var/lib/node_exporter/textfile_collector"
      networks:
        - kafka-net



  ##################
  #    GRAFANA     #
  ##################

  grafana:
    image: grafana/grafana:12.0.1
    ports:
      - "3000:3000"
    environment:
      # Password will be 'password', login is 'admin' by default
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - "${PWD}/grafana/datasources:/etc/grafana/provisioning/datasources"
      - "${PWD}/grafana/dashboards:/etc/grafana/provisioning/dashboards"
    networks:
      - kafka-net



  ##################
  #  CMD LAUNCHER  #
  ##################

  ubuntu-init:
    image: ubuntu:24.04
    depends_on:
      - kafka-connect1
      - kafka-connect2
      - kafka-connect3
    volumes:
      - "${PWD}/entrypoints/ubuntu-init.entrypoint.sh:/etc/ubuntu-init/entrypoint.sh"
      - "${PWD}/kafka-connect-settings/amiens-weather-http-source.json:/tmp/amiens-weather-http-source.json"
    entrypoint: ["/etc/ubuntu-init/entrypoint.sh"]
    networks:
      - kafka-net

  kafka-consumer:
    image: maven:3.9.9
    working_dir: /app
    volumes:
      - "${PWD}/java/consumer:/app"
      - "${PWD}/custom-metrics:/app/metrics"
    command: mvn compile exec:java -Dexec.mainClass="isri.kafka.Consumer"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kafka-net
